# Uses MKLROOT env. variable or MKL_ROOT variable to find MKL.
#
# The MKL 32 bit int precision is assumed.
# 
# The TBB threading back-end is not supported.
#
# The type of threading for MKL has to be specified using the variable
#        MKL_THREADING:
#         - Intel OpenMP
#         - GNU OpenMP
#         - Sequential
#
# Link to MKL::MKL.

# Note: This file is adapted version of Raffaele's dla_lapack.cmake module

include(cosma_utils)
include(CheckFunctionExists)
include(FindPackageHandleStandardArgs)

unset(COSMA_LAPACK_LIBRARY CACHE)
setoption(COSMA_LAPACK_TYPE STRING "Compiler" "BLAS/LAPACK type setting")
set_property(CACHE COSMA_LAPACK_TYPE PROPERTY STRINGS Compiler MKL Custom)

if(CMAKE_CXX_COMPILER_ID MATCHES "Intel" OR ${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
  set(MKL_THREADING_OPTIONS Sequential "Intel OpenMP")
  set(MKL_THREADING_DEFAULT "Intel OpenMP")
else()
  set(MKL_THREADING_OPTIONS Sequential "GNU OpenMP" "Intel OpenMP")
  set(MKL_THREADING_DEFAULT "GNU OpenMP")
endif()
setoption(MKL_THREADING STRING "${MKL_THREADING_DEFAULT}" "MKL Threading support")
set_property(CACHE MKL_THREADING PROPERTY STRINGS ${MKL_THREADING_OPTIONS})

setoption(MKL_ROOT PATH $ENV{MKLROOT} "Intel MKL path")
if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
  set(MKL_LIB_DIR "-L${MKL_ROOT}/lib -Wl,-rpath,${MKL_ROOT}/lib")
else()
  set(MKL_LIB_DIR "-L${MKL_ROOT}/lib/intel64")
endif()

if(MKL_THREADING MATCHES "Sequential")
  set(MKL_THREAD_LIB "-lmkl_sequential")
elseif(MKL_THREADING MATCHES "GNU OpenMP")
  set(MKL_THREAD_LIB "-lmkl_gnu_thread -fopenmp")
elseif(MKL_THREADING MATCHES "Intel OpenMP")
  if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    setoption(INTEL_LIBS_ROOT PATH "/opt/intel/lib" "Path to Intel libraries")
    find_library(IOMP5_LIB iomp5 HINTS "${INTEL_LIBS_ROOT}" NO_DEFAULT_PATH)
    if (IOMP5_LIB MATCHES "IOMP5_LIB-NOTFOUND")
      message(FATAL_ERROR "libiomp5 not found, please set INTEL_LIBS_ROOT correctly")
    endif()
    set(IOMP5_LIB_INTERNAL "-Wl,-rpath,${INTEL_LIBS_ROOT} ${IOMP5_LIB}")
  else()
    set(IOMP5_LIB_INTERNAL "-liomp5")
  endif()
  set(MKL_THREAD_LIB "-lmkl_intel_thread ${IOMP5_LIB_INTERNAL}")
endif()
set(COSMA_LAPACK_INCLUDE_PATH_INTERNAL "${MKL_ROOT}/include")
set(COSMA_LAPACK_LIB_INTERNAL "${MKL_LIB_DIR} -lmkl_intel_lp64 ${MKL_THREAD_LIB} -lmkl_core -lpthread -lm -ldl")

set(COSMA_LAPACK_INCLUDE_PATH "${COSMA_LAPACK_INCLUDE_PATH_INTERNAL}" CACHE PATH "BLAS/LAPACK include path (autogenerated)")
separate_arguments(TMP UNIX_COMMAND "${COSMA_LAPACK_LIB_INTERNAL}")
set(COSMA_LAPACK_LIBRARY "${TMP}" CACHE PATH "BLAS/LAPACK link line (autogenerated)")

add_library(MKL::MKL INTERFACE IMPORTED)
set_target_properties(MKL::MKL PROPERTIES INTERFACE_INCLUDE_DIRECTORIES 
  "${COSMA_LAPACK_INCLUDE_PATH}")
set_target_properties(MKL::MKL PROPERTIES INTERFACE_LINK_LIBRARIES 
  "${COSMA_LAPACK_LIBRARY}")

find_package_handle_standard_args(MKL DEFAULT_MSG)

